.er-toggle {
  > .er-input__control {
    > .er-input__slot {
      > input {
        display: none;
      }
      > label {
        cursor: pointer;
        position: relative;
        display: flex;
        align-items: center;
      }
    }
  }
  &--switch {
    > .er-input__control {
      > .er-input__slot {
        > label {
          > .er-toggle__outer {
            width: 48px;
            height: 24px;
            border-radius: 12px;
            background: map_get($gray, '4');
            box-shadow: inset -4px 4px 4px rgba(map_get($shades, 'black'), 0.1);
            transition: $primary-transition;
            > .er-toggle__inner-wrap {
              position: absolute;
              top: 1px;
              left: 1px;
              width: 22px;
              height: 22px;
              border-radius: 50%;
              box-shadow: -1px 1px 1px rgba(map_get($shades, 'black'), 0.1), -2px 2px 4px rgba(map_get($shades, 'black'), 0.2);
              background: linear-gradient(to bottom left, map_get($gray, '12') 36.65%, map_get($gray, '13') 74.56%, map_get($gray, '14') 100%);
              padding: 1px;
              transition: $primary-transition;
              transform-origin: center;
              > .er-toggle__inner {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                background: map_get($gray, '15');
                padding: { left: 2px };
                transition: $primary-transition;
                svg {
                  width: 16px;
                  color: rgba(map_get($gray, '7'), 0.5);
                  transition: $primary-transition;
                }
              }
            }
          }
          &:hover {
            > .er-toggle__outer {
              > .er-toggle__inner-wrap {
                transform: scale((24 / 22));
                box-shadow: -4px 4px 6px rgba(map_get($shades, 'black'), 0.1);
                > .er-toggle__inner {
                  background: map_get($gray, '16');
                }
              }
            }
          }
        }
        > input:checked {
          + label {
            > .er-toggle__outer {
              > .er-toggle__inner-wrap {
                transform: translateX(24px);
                background: linear-gradient(to bottom left, map_get($green, 'lighten-2') 36.65%, map_get($green, 'base') 74.56%, map_get($green, 'darken-1') 100%);
                > .er-toggle__inner {
                  padding: { top: 1px };
                  background: map_get($green, 'base');
                  svg {
                    color: map_get($shades, 'white');
                  }
                }
              }
            }
            &:hover {
              > .er-toggle__outer {
                > .er-toggle__inner-wrap {
                  transform: translateX(24px) scale((24 / 22));
                }
              }
            }
          }
        }
      }
    }
  }
  &--radio {
    > .er-input__control {
      > .er-input__slot {
        > label {
          > .er-toggle__outer {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: map_get($gray, '13');
            box-shadow: inset -2px 2px 4px rgba(map_get($shades, 'black'), 0.1);
            transition: $primary-transition;
            position: relative;
            > .er-toggle__inner-wrap {
              opacity: 0;
              position: absolute;
              width: 12px;
              height: 12px;
              top: 2px; right: 2px; bottom: 2px; left: 2px;
              border-radius: 50%;
              box-shadow: -1px 1px 1px rgba(map_get($shades, 'black'), 0.15), -2px 2px 4px rgba(map_get($shades, 'black'), 0.2);
              background: linear-gradient(to bottom left, map_get($green, 'lighten-2') 36.65%, map_get($green, 'base') 74.56%, map_get($green, 'darken-1') 100%);
              padding: 1px;
              transition: $primary-transition;
              transform-origin: center;
              > .er-toggle__inner {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background: map_get($green, 'base');
                transition: $primary-transition;
              }
            }
          }
          &:hover {
            > .er-toggle__outer {
              box-shadow: inset -4px 4px 4px rgba(map_get($shades, 'black'), 0.1);
              > .er-toggle__inner-wrap {
                transform: scale((14 / 12));
                box-shadow: -2px 1px 6px rgba(map_get($shades, 'black'), 0.25);
                > .er-toggle__inner {
                  background: map_get($green, 'lighten-1');
                }
              }
            }
          }
        }
        > input:checked {
          + label {
            > .er-toggle__outer {
              > .er-toggle__inner-wrap {
                opacity: 1;
              }
            }
          }
        }
      }
    }
  }
  &--radio-check {
    > .er-input__control {
      > .er-input__slot {
        > label {
          > .er-toggle__outer {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: linear-gradient(to bottom left, map_get($gray, '17') 0%, map_get($shades, 'white') 100%);
            padding: 2px;
            transition: $primary-transition;
            > .er-toggle__inner {
              width: 20px;
              height: 20px;
              background: map_get($gray, '13');
              border-radius: 50%;
              box-shadow: inset -4px 4px 4px rgba(map_get($shades, 'black'), 0.15);
              padding: { left: 1px };
              transition: $primary-transition;
              svg {
                opacity: 0;
                width: 16px;
                color: map_get($shades, 'white');
                transition: $primary-transition;
              }
            }
          }
          &:hover {
            > .er-toggle__outer {
              background: linear-gradient(to bottom left, map_get($gray, '18') 0%, map_get($shades, 'white') 100%);
              > .er-toggle__inner {
                box-shadow: inset -6px 6px 4px rgba(map_get($shades, 'black'), 0.15);
              }
            }
          }
        }
        > input:checked {
          + label {
            > .er-toggle__outer {
              background: linear-gradient(to bottom left, map_get($green, 'darken-1') 0%, map_get($green, 'lighten-3') 100%);
              > .er-toggle__inner {
                background: map_get($green, 'base');
                svg {
                  opacity: 1;
                }
              }
            }
            &:hover {
              > .er-toggle__outer {
                background: linear-gradient(to bottom left, map_get($green, 'other-3') 0%, map_get($green, 'lighten-3') 100%);
              }
            }
          }
        }
      }
    }
  }
  &--error {
    > .er-input__control {
      > .er-messages {
        text-align: right;
        color: map_get($red, 'base');
      }
    }
  }
  &__label-text {
    @extend %button-font;
    display: inline-block;
    margin-left: 4px;
    @include color-black(0.5);
    border-bottom: 1px dashed;
    user-select: none;
  }
}
